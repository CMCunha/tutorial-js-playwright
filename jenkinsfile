pipeline {
  parameters {
    string(name: 'testExecs', defaultValue: '')
    string(name: 'projectKey', defaultValue: '')
    string(name: 'testPlanKey', defaultValue: '')
  }
  agent {
    docker { 
      image 'mcr.microsoft.com/playwright:v1.27.0-focal'
    } 
  }
  stages {
    stage('install playwright') {
      steps {
        sh '''
          npm i -D @playwright/test
          npx playwright install
        '''
      }
    }
    //stage('help') {
    //  steps {
    //    sh 'npx playwright test --help'
    //  }
    //}
    stage('test') {
      steps {
        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
          sh '''
            PLAYWRIGHT_JUNIT_OUTPUT_NAME=xray-report.xml npx playwright test
          '''
        }
      }
    }
    stage('Import results to Xray') {
      steps {
        script{
          if (params.testPlanKey.isEmpty()) {
            if (params.testExecs.isEmpty()) {
              echo "1"
              step([$class: 'XrayImportBuilder', endpointName: '/junit', importFilePath: 'xray-report.xml', importToSameExecution: 'true', projectKey: 'COM', fixVersion: '1.2', revision: '131', serverInstance: '41428247-c335-44ef-bf69-96d8fb88675a'])
            } else {
              echo "2"
              step([$class: 'XrayImportBuilder', endpointName: '/junit', importFilePath: 'xray-report.xml', importToSameExecution: 'true', projectKey: 'COM', testExecKey: params.testExecs, fixVersion: '1.2', revision: '131', serverInstance: '41428247-c335-44ef-bf69-96d8fb88675a'])
            }
          } else {
            if (params.testExecs.isEmpty()) {
              echo "3"
              step([$class: 'XrayImportBuilder', endpointName: '/junit', importFilePath: 'xray-report.xml', importToSameExecution: 'true', projectKey: params.projectKey, testPlanKey: params.testPlanKey, fixVersion: '1.2', revision: '131', serverInstance: '41428247-c335-44ef-bf69-96d8fb88675a'])
            }
          }
        }  
      }
    }
    stage('Extract Variable from log'){
      steps {
        script {
          def logContent = Jenkins.getInstance().getItemByFullName(env.JOB_NAME).getBuildByNumber(Integer.parseInt(env.BUILD_NUMBER)).logFile.text
          env.testExecs = (logContent =~ /XRAY_TEST_EXECS:.*/).findAll().first()
          echo testExecs
         }
      }
    }
    stage('Using variable from another stage') {
      steps {
        script {
          echo "${env.testExecs}"
        }
      }
    }
  }
  post 
  {
    always {
      junit '*.xml'
    }
  }
}
